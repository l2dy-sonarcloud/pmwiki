version=pmwiki-2.0.beta7
newline=²
time=1102947933
text=Q:Why utf-8 is not used for all pages. I really liked the  idea of mulltilanguage without changing the group.name or opening a new group.name . (Cookbook.MultiLanguage) - [[http://www.pmwiki.org/wiki/Profiles/CarlosAlbertoBonamigo | Carlos Alberto Bonamigo]] (Maybe it is related with the following bugs  PITS:00035 and also PITS:00011)²²C:Maybe it is somehow connected to the issue I've described below (at the bottom of this page)?²--CleverFool²²A: The basic issue is that regular expression support for utf-8 is still not completely available in PHP.  See PITS:00168.  --Pm²²A: See also [[UTF8.UTF8]].  --Pm²²Q: How can I display a html file from the same folder that pmwiki is installed , inside (i.e.) a PmWiki.HomePage wiki page file?²²A: By default this isn't supported, because it poses a few security risks.  But a cookbook recipe could be developed to support it.  (See Cookbook:IncludeUrl for one example.) (and also the included markup.)²²Q: How can I place a mailing address in a page?²²A: Use the [@mailto:@] markup, as in ²(:markup:) [=mailto:myaddress@toto.net=]²²Q: How can I make a WikiWord link to an external page instead of a WikiPage?²²A: Use either [@[[http://www.example.com | WikiWord]]@] or [@[[WikiWord -> http://www.example.com]]@].²²Q: Is there a PmWiki-Forum, where I can ask queations like this: Is there a list of WebHosts about successful PmWiki-Installations? My experience with different WebHosts: 90 % of PmWiki installations failed!²²A: Let's just create one at WebHosts.  And I'm very interested to know which installations failed and why.  --Pm²²C: O.k. I'll be there in more detail. But the major issue I can already disclose here: permission setting problems caused failed installations.²--Armin²²Q: I have used one of the recent pmwiki 1 versions to create russian-language wiki site. I've specified UTF-8 as encoding for pmwiki and installation worked with cyrillic characters quite well, except for words with russian symbols was not recognized as WikiWords or FreeLinks (like this &#1042;&#1080;&#1082;&#1080;&#1057;&#1083;&#1086;&#1074;&#1086; and like this [[&#1042;&#1080;&#1082;&#1080; &#1057;&#1083;&#1086;&#1074;&#1086;]]). I've swithced encoding to Windows-1251 (Cp1251). It's fixed all language-related problems for Gecko (Mozilla) based web-browsers. However links to such pages weren't working in Interner Explorer (which is still often used everywhere:)). I've go a lot of fun trying to solve this issue and finished by adding code to pmwiki.php which URLEncodes and URLDecodes all links. This helped. I'm coming closer to my question:) Now I'm thinking if I need to upgrade to pmwiki 2. The question is: Is something changed in language-specific code in pmwiki 2 or it is still needed to hack pmwiki before using with russian language?²--CleverFool²²A: PmWiki 2 urlencodes its links (even PmWiki 1 is doing this to some extent).  And also take a look at [[UTF8.UTF8]] to see what's being done with utf8 characters in link names.  --[[~Pm]]²²²²Q: I understand that PmWiki is designed for fast edit and fast saves; my question is: what about *rendering*?²I am a real newcomer as concerns wikis, I just tried a simple one (Wikini, too simple for me) and a "complicated" one (MediaWiki), and I clearly see a difference in reactivity: Mediawiki is far slower on the host I use.²Thus, I'd like to know how fast PmWiki is at rendering, and specially, wether the fact its database is ascii-based is a help or a crawl in this area, compared to SQL which both wikini and mediawiki are using. I fear I can't really assess this with empty databases just by installing PmWiki...  Hervé²²A: Well, PmWiki comes with a complete set of documentation when you install it, so this would give you some idea of its rendering speed.  And really the choice of saving the markup (ASCII) data in flat files versus SQL isn't a major speed differentiator (see FlatFileAdvantages)-- the real question is how quickly the engine can convert the markup text into HTML, and if the rendered text can be preprocessed or otherwise cached so that it doesn't have to be reprocessed at each page access.  At present PmWiki doesn't do much in the way of caching or preprocessing rendered output (although we're working on it), but PmWiki is still reasonably quick given all that it does.  Pm has placed timers in the code to evaluate it, and so far all page renderings observed, even for complex pages such as PITS:PITS, use less than 0.75 seconds of user-space CPU time, with most pages being processed in 0.25 seconds or less. --[[~Pm]]²²FlatFileAdvantages indeed convinced me ;-)²Thanks, too, for the very quick reaction²-- Hervé²²
targets=Cookbook.MultiLanguage,PmWiki.CleverFool,UTF8.UTF8,PmWiki.HomePage,PmWiki.WikiWord,PmWiki.WikiPage,PmWiki.PmWiki,PmWiki.WebHosts,PmWiki.WikiWords,PmWiki.FreeLinks,PmWiki.URLEncodes,PmWiki.URLDecodes,Profiles.Pm,PmWiki.MediaWiki,PmWiki.FlatFileAdvantages
author=
name=PmWiki.FAQ
host=194.237.142.21
agent=Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)
rev=47
